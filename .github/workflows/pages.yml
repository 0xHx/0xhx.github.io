# Simple workflow for deploying static content to GitHub Pages
name: Deploy static to Pages

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  schedule:
    - cron: "12 4 * * 6"

permissions:
  contents: read
  pages: write
  id-token: write

env:
  BSITE: "d3d3LnF1aW50eXBlLmNvbQo="
  SITE: null
  PATH_ROOT: null

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Init Ubuntu
        id: init
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install gnupg unzip git wget curl
          # import key
          echo "${{ secrets.GPG_XSTREAM2 }}" > ${RUNNER_TEMP}/test.key
          gpg --import ${RUNNER_TEMP}/test.key
          echo "status=success" >> $GITHUB_OUTPUT

        shell: bash

      

      - name: Cache Primes
        id: cache
        if: ( steps.init.outputs.status == 'success' && !cancelled() )
        uses: actions/cache@v3
        with:
          path: html
          key: pages

      - name: Get Htmls for Cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          site=`echo ${{ env.BSITE }}|base64 -d`
          wget --user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_16) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0.2 Safari/605.1.15"  -q -k -m -np  https://${site}/ . || true
          if [[ ! -d ${site} ]]; then
              ls -al .
              exit 2
          fi 
          mv ${site} html
          echo "User-agent: *" > html/robots.txt
          echo "Disallow: /" >> html/robots.txt
        shell: bash

      - name: Generate Yamls
        id: yamls
        if: ( steps.init.outputs.status == 'success' && !cancelled() )
        run: |
          # add f
          cp -R html pages
          mkdir -p pages/f
          gpg --output user.txt --decrypt user.cfg
          gpg --output bastip.txt --decrypt bastip.cfg
          gpg --output domaincn.txt --decrypt domaincn.cfg

          domaincn=`cat domaincn.txt`
          export  TZ='Asia/Shanghai'
          cat default/routing.json|sed "s/\"mydomaincn\"/${domaincn}/g" > routing.json
          cat routing.json > default/routing.json

          for userline in `cat user.txt` ; do
            # make dirs for user
            user=`echo ${userline}|cut -d, -f1`
            uuidvls=`echo ${userline}|cut -d, -f2`
            uuidtor=`echo ${userline}|cut -d, -f3`
            mkdir -p pages/f/${uuidvls}/
            citys="wh ct sh"
            echo "${user}:"
            echo "`date`" > pages/f/${uuidvls}/index.html
            ## 通过域名创建配置文件
            for city in ${citys} ; do
              PATH_YAML="pages/f/${uuidvls}/${city}.yaml"
              PATH_JSON="pages/f/${uuidvls}/${city}.json"
              PATH_LIST="pages/f/${uuidvls}/${city}.list"
              echo "/f/${uuidvls}/${city}.yaml"
              echo "/f/${uuidvls}/${city}.json"
              echo "/f/${uuidvls}/${city}.list"
              echo "port: 7890" > ${PATH_YAML}
              echo "allow-lan: false" >> ${PATH_YAML}
              echo "bind-address: '*'" >> ${PATH_YAML}
              echo "mode: rule" >> ${PATH_YAML}
              echo "log-level: error" >> ${PATH_YAML}
              echo "ipv6: false" >> ${PATH_YAML}
              echo "routing-mark: 6688" >> ${PATH_YAML}
              echo "proxies:" >> ${PATH_YAML}
              echo "# list " > ${PATH_LIST}
              jsonout="";
              for (( id=0; id<=5; id++ )) ; do
                # goo
                jsonout="{\"protocol\":\"vless\",\"tag\":\"vls-${city}-${id}\",\"settings\":{\"vnext\":[{\"address\":\"cdn${id}.${city}${{ secrets.BASE_DOMAIN }}\",\"port\":443,\"users\":[{\"id\":\"${uuidvls}\",\"encryption\":\"none\"}]}]},\"streamSettings\":{\"network\":\"ws\",\"security\":\"tls\",\"wsSettings\":{\"acceptProxyProtocol\":false,\"headers\":{\"Host\":\"goo${id}${{ secrets.BASE_DOMAIN }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_VLS }}\"},\"tlsSettings\":{\"alpn\":[\"http/1.1\"],\"serverName\":\"goo${id}${{ secrets.BASE_DOMAIN }}\",\"allowInsecure\": true,\"fingerprint\":\"randomized\"}}},${jsonout}"
                echo "  - {name: vms-${city}-${id} , server: cdn${id}.${city}${{ secrets.BASE_DOMAIN }}, port: 443, type: vmess, uuid: ${uuidvls}, alterId: 0,skip-cert-verify: true, mux:true,  cipher: auto, tls: true, network: ws, ws-path: ${{ secrets.PATH_VMS }}, ws-headers: {Host: goo${id}${{ secrets.BASE_DOMAIN }}, User-Agent:${{ secrets.USERAGENT }} },flag: ${id}, alpn: http/1.1 }" >> ${PATH_YAML}
                
                uuidserver=`echo auto:${uuidvls}@cdn${id}.${city}${{secrets.BASE_DOMAIN}}:443|base64`
                # path
                echo "vless://${uuidserver}?obfsParam=%7B%22Host%22%3A%22goo${id}${{secrets.BASE_DOMAIN}}%22%2C%22User-Agent%22%3A%22${{secrets.USERAGENT}}%22%7D&obfs=websocket&tls=1&tfo=1&mux=1&xtls=1&path=${{secrets.PATH_VLS}}" >> ${PATH_LIST}
                
                # opc
                jsonout="{\"protocol\":\"vless\",\"tag\":\"opc-${city}-${id}\",\"settings\":{\"vnext\":[{\"address\":\"cdn${id}.${city}${{ secrets.BASE_DOMAIN }}\",\"port\":443,\"users\":[{\"id\":\"${uuidvls}\",\"encryption\":\"none\"}]}]},\"streamSettings\":{\"network\":\"ws\",\"security\":\"tls\",\"wsSettings\":{\"acceptProxyProtocol\":false,\"headers\":{\"Host\":\"opc${id}${{ secrets.BASE_DOMAIN }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_VLS }}\"},\"tlsSettings\":{\"alpn\":[\"http/1.1\"],\"serverName\":\"opc${id}${{ secrets.BASE_DOMAIN }}\",\"allowInsecure\": true,\"fingerprint\":\"randomized\"}}},${jsonout}"
                echo "  - {name: opc-${city}-${id} , server: cdn${id}.${city}${{ secrets.BASE_DOMAIN }}, port: 443, type: vmess, uuid: ${uuidvls}, alterId: 0,skip-cert-verify: true, mux:true,  cipher: auto, tls: true, network: ws, ws-path: ${{ secrets.PATH_VMS }}, ws-headers: {Host: opc${id}${{ secrets.BASE_DOMAIN }}, User-Agent:${{ secrets.USERAGENT }} },flag: ${id}, alpn: http/1.1 }" >> ${PATH_YAML}
                # tor
                jsonout="{\"protocol\":\"vless\",\"tag\":\"tor-${city}-${id}\",\"settings\":{\"vnext\":[{\"address\":\"cdn${id}.${city}${{ secrets.BASE_DOMAIN }}\",\"port\":443,\"users\":[{\"id\":\"${uuidtor}\",\"encryption\":\"none\"}]}]},\"streamSettings\":{\"network\":\"ws\",\"security\":\"tls\",\"wsSettings\":{\"acceptProxyProtocol\":false,\"headers\":{\"Host\":\"tor${id}${{ secrets.BASE_DOMAIN }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_TOR }}\"},\"tlsSettings\":{\"alpn\":[\"http/1.1\"],\"serverName\":\"tor${id}${{ secrets.BASE_DOMAIN }}\",\"allowInsecure\": true,\"fingerprint\":\"randomized\"}}},${jsonout}"
                echo "  - {name: tor-${city}-${id} , server: cdn${id}.${city}${{ secrets.BASE_DOMAIN }}, port: 443, type: vmess, uuid: ${uuidtor}, alterId: 0,skip-cert-verify: true, mux:true,  cipher: auto, tls: true, network: ws, ws-path: ${{ secrets.PATH_TORM }}, ws-headers: {Host: tor${id}${{ secrets.BASE_DOMAIN }}, User-Agent:${{ secrets.USERAGENT }} },flag: ${id}, alpn: http/1.1 }" >> ${PATH_YAML}
              done
              id=0
              # add quic
              for ip in ${{ secrets.QUIC_IPS }}; do
                id=$[$id+1]
                jsonout="{\"protocol\": \"vless\",\"tag\": \"qic-${id}\",\"settings\": {\"vnext\": [{\"address\": \"${ip}\",\"port\": 443,\"users\": [{\"id\": \"${uuidvls}\",\"encryption\": \"none\"}]}]},\"streamSettings\": {\"network\": \"quic\",\"security\": \"tls\",\"quicSettings\": {\"security\": \"aes-128-gcm\",\"key\": \"${{ secrets.QUIC_KEY }}\",\"header\": {\"type\": \"wechat-video\"}},\"tlsSettings\": {\"allowInsecure\":true,\"serverName\": \"${{ secrets.QUIC_SHPORT }}\"}}},${jsonout}"
              done
              # add 
              jsonother=`cat .github/other.json`
              echo "{\"outbounds\":[${jsonout}${jsonother}]}"|jq . -c &>  default/outbounds.json
              cat default/*.json|grep -v "#"|grep -v "//"|jq -s 'add' -S -c &> ${PATH_JSON}
            done

            ## 针对ip的配置文件
            for cityline in `cat bastip.txt` ; do
              ## make city yaml(vms)、json(vls)
              city=`echo ${cityline}|cut -d, -f1`
              ips=`echo ${cityline}|cut -d, -f3|sed 's/;/ /g'`
              PATH_YAML="pages/f/${uuidvls}/${city}.ip.yaml"
              PATH_JSON="pages/f/${uuidvls}/${city}.ip.json"
              echo "/f/${uuidvls}/${city}.ip.yaml"
              echo "/f/${uuidvls}/${city}.ip.json"
              ## file head
              echo "port: 7890" > ${PATH_YAML}
              echo "allow-lan: false" >> ${PATH_YAML}
              echo "bind-address: '*'" >> ${PATH_YAML}
              echo "mode: rule" >> ${PATH_YAML}
              echo "log-level: error" >> ${PATH_YAML}
              echo "ipv6: false" >> ${PATH_YAML}
              echo "routing-mark: 6688" >> ${PATH_YAML}
              echo "proxies:" >> ${PATH_YAML}
              jsonout="";
              id=0
              if [[ $city == 'sh' ]];then
                echo "  - {name: vls-${city}-${id} , server: ${{ secrets.IP_SHPORT }}, port: 443, type: vless, uuid: ${uuidvls}, alterId: 0, skip-cert-verify: true, mux:true, encryption: none, tls: true, network: ws, ws-path: ${{ secrets.PATH_VLS }}, ws-headers: {Host: ${{ secrets.DM_SHPORT }}, User-Agent:${{ secrets.USERAGENT }} },flag: cn, alpn: http/1.1 }" >> ${PATH_YAML}
              else
                for ip in ${ips}; do
                  id=$[$id+1]
                  if [[ $id -lt 4 ]]; then
                    # goo
                    jsonout="{\"protocol\":\"vless\",\"tag\":\"vls-${city}-${id}\",\"settings\":{\"vnext\":[{\"address\":\"${ip}\",\"port\":443,\"users\":[{\"id\":\"${uuidvls}\",\"encryption\":\"none\"}]}]},\"streamSettings\":{\"network\":\"ws\",\"security\":\"tls\",\"wsSettings\":{\"acceptProxyProtocol\":false,\"headers\":{\"Host\":\"goo${id}${{ secrets.BASE_DOMAIN }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_VLS }}\"},\"tlsSettings\":{\"alpn\":[\"http/1.1\"],\"serverName\":\"goo${id}${{ secrets.BASE_DOMAIN }}\",\"allowInsecure\": true,\"fingerprint\":\"randomized\"}}},${jsonout}"
                  
                    echo "  - {name: vms-${city}-${id} , server: ${ip}, port: 443, type: vmess, uuid: ${uuidvls}, alterId: 0,skip-cert-verify: true, mux:true,  cipher: auto, tls: true, network: ws, ws-path: ${{ secrets.PATH_VMS }}, ws-headers: {Host: goo${id}${{ secrets.BASE_DOMAIN }}, User-Agent:${{ secrets.USERAGENT }} },flag: ${id}, alpn: http/1.1 }" >> ${PATH_YAML}
                  elif [[ $id -lt 7 ]]; then
                    # opc
                    jsonout="{\"protocol\":\"vless\",\"tag\":\"opc-${city}-${id}\",\"settings\":{\"vnext\":[{\"address\":\"${ip}\",\"port\":443,\"users\":[{\"id\":\"${uuidvls}\",\"encryption\":\"none\"}]}]},\"streamSettings\":{\"network\":\"ws\",\"security\":\"tls\",\"wsSettings\":{\"acceptProxyProtocol\":false,\"headers\":{\"Host\":\"opc${id}${{ secrets.BASE_DOMAIN }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_VLS }}\"},\"tlsSettings\":{\"alpn\":[\"http/1.1\"],\"serverName\":\"opc${id}${{ secrets.BASE_DOMAIN }}\",\"allowInsecure\": true,\"fingerprint\":\"randomized\"}}},${jsonout}"
                  
                    echo "  - {name: opc-${city}-${id} , server: ${ip}, port: 443, type: vmess, uuid: ${uuidvls}, alterId: 0,skip-cert-verify: true, mux:true,  cipher: auto, tls: true, network: ws, ws-path: ${{ secrets.PATH_VMS }}, ws-headers: {Host: opc${id}${{ secrets.BASE_DOMAIN }}, User-Agent:${{ secrets.USERAGENT }} },flag: ${id}, alpn: http/1.1 }" >> ${PATH_YAML}
                  else
                    # tor
                    jsonout="{\"protocol\":\"vless\",\"tag\":\"tor-${city}-${id}\",\"settings\":{\"vnext\":[{\"address\":\"${ip}\",\"port\":443,\"users\":[{\"id\":\"${uuidtor}\",\"encryption\":\"none\"}]}]},\"streamSettings\":{\"network\":\"ws\",\"security\":\"tls\",\"wsSettings\":{\"acceptProxyProtocol\":false,\"headers\":{\"Host\":\"tor${id}${{ secrets.BASE_DOMAIN }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_TOR }}\"},\"tlsSettings\":{\"alpn\":[\"http/1.1\"],\"serverName\":\"tor${id}${{ secrets.BASE_DOMAIN }}\",\"allowInsecure\": true,\"fingerprint\":\"randomized\"}}},${jsonout}"
                  
                    echo "  - {name: tor-${city}-${id} , server: ${ip}, port: 443, type: vmess, uuid: ${uuidtor}, alterId: 0,skip-cert-verify: true, mux:true,  cipher: auto, tls: true, network: ws, ws-path: ${{ secrets.PATH_TORM }}, ws-headers: {Host: tor${id}${{ secrets.BASE_DOMAIN }}, User-Agent:${{ secrets.USERAGENT }} },flag: ${id}, alpn: http/1.1 }" >> ${PATH_YAML}
                  fi
                done
                # add frp
                jsonout="{\"protocol\": \"vless\",\"tag\":\"frp\",\"settings\": {\"vnext\": [{\"address\":\"${{ secrets.IP_SHPORT }}\",\"port\": 443,\"users\":[{\"id\":\"${uuidvls}\",\"encryption\": \"none\"}]}]},\"streamSettings\": {\"network\":\"ws\",\"security\": \"tls\",\"wsSettings\": {\"headers\":{\"Host\":\"${{ secrets.DM_SHPORT }}\",\"User-Agent\":\"${{ secrets.USERAGENT }}\"},\"path\":\"${{ secrets.PATH_VLS }}\"},\"tlsSettings\": {\"serverName\": \"${{ secrets.DM_SHPORT }}\",\"fingerprint\":\"randomized\",\"allowInsecure\":true}}},${jsonout}"
                id=0
                for ip in ${{ secrets.QUIC_IPS }}; do
                  id=$[$id+1]
                  jsonout="{\"protocol\": \"vless\",\"tag\": \"qic-${id}\",\"settings\": {\"vnext\": [{\"address\": \"${ip}\",\"port\": 443,\"users\": [{\"id\": \"${uuidvls}\",\"encryption\": \"none\"}]}]},\"streamSettings\": {\"network\": \"quic\",\"security\": \"tls\",\"quicSettings\": {\"security\": \"aes-128-gcm\",\"key\": \"${{ secrets.QUIC_KEY }}\",\"header\": {\"type\": \"wechat-video\"}},\"tlsSettings\": {\"allowInsecure\":true,\"serverName\": \"${{ secrets.QUIC_SHPORT }}\"}}},${jsonout}"
                done
              fi
              jsonother=`cat .github/other.json`
              echo "{\"outbounds\":[${jsonout}${jsonother}]}"|jq . -c &>  default/outbounds.json
              cat default/*.json|grep -v "#"|grep -v "//"|jq -s 'add' -S -c &> ${PATH_JSON}
            done
          done
          echo "f:`date`" > pages/f/inde.html
          echo "status=success" >> $GITHUB_OUTPUT
        shell: bash

      - name: Setup Pages
        if: ( steps.yamls.outputs.status == 'success' && !cancelled() )
        uses: actions/configure-pages@v2

      - name: Upload artifact
        if: ( steps.yamls.outputs.status == 'success' && !cancelled() )
        uses: actions/upload-pages-artifact@v1
        with:
          path: pages

      - name: Deploy to GitHub Pages
        if: ( steps.yamls.outputs.status == 'success' && !cancelled() )
        uses: actions/deploy-pages@v1

      - name: Delete Workflow Runs
        uses: Mattraks/delete-workflow-runs@v2
